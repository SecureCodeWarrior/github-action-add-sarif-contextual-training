{"$schema":"https://json.schemastore.org/sarif-2.1.0.json","version":"2.1.0","runs":[{"tool":{"driver":{"name":"GitHub CodeQL","organization":"GitHub","semanticVersion":"2.17.4","notifications":[],"rules":[]},"extensions":[{"name":"codeql/python-queries","semanticVersion":"1.0.0+a7bbcf3eb852c333fa007aa27fccbfc5ea43a940","notifications":[],"rules":[{"id":"py/path-injection","name":"py/path-injection","shortDescription":{"text":"Uncontrolled data used in path expression"},"fullDescription":{"text":"Accessing paths influenced by users can allow an attacker to access unexpected resources."},"defaultConfiguration":{"enabled":true,"level":"error"},"help":{"text":"# Uncontrolled data used in path expression\nAccessing files using paths constructed from user-controlled data can allow an attacker to access unexpected resources. This can result in sensitive information being revealed or deleted, or an attacker being able to influence behavior by modifying unexpected files.\n\n\n## Recommendation\nValidate user input before using it to construct a file path, either using an off-the-shelf library function like `werkzeug.utils.secure_filename`, or by performing custom validation.\n\nIdeally, follow these rules:\n\n* Do not allow more than a single \".\" character.\n* Do not allow directory separators such as \"/\" or \"\\\\\" (depending on the file system).\n* Do not rely on simply replacing problematic sequences such as \"../\". For example, after applying this filter to \".../...//\", the resulting string would still be \"../\".\n* Use an allowlist of known good patterns.\n\n## Example\nIn the first example, a file name is read from an HTTP request and then used to access a file. However, a malicious user could enter a file name that is an absolute path, such as `\"/etc/passwd\"`.\n\nIn the second example, it appears that the user is restricted to opening a file within the `\"user\"` home directory. However, a malicious user could enter a file name containing special characters. For example, the string `\"../../../etc/passwd\"` will result in the code reading the file located at `\"/server/static/images/../../../etc/passwd\"`, which is the system's password file. This file would then be sent back to the user, giving them access to all the system's passwords. Note that a user could also use an absolute path here, since the result of `os.path.join(\"/server/static/images/\", \"/etc/passwd\")` is `\"/etc/passwd\"`.\n\nIn the third example, the path used to access the file system is normalized *before* being checked against a known prefix. This ensures that regardless of the user input, the resulting path is safe.\n\n\n```python\nimport os.path\nfrom flask import Flask, request, abort\n\napp = Flask(__name__)\n\n@app.route(\"/user_picture1\")\ndef user_picture1():\n    filename = request.args.get('p')\n    # BAD: This could read any file on the file system\n    data = open(filename, 'rb').read()\n    return data\n\n@app.route(\"/user_picture2\")\ndef user_picture2():\n    base_path = '/server/static/images'\n    filename = request.args.get('p')\n    # BAD: This could still read any file on the file system\n    data = open(os.path.join(base_path, filename), 'rb').read()\n    return data\n\n@app.route(\"/user_picture3\")\ndef user_picture3():\n    base_path = '/server/static/images'\n    filename = request.args.get('p')\n    #GOOD -- Verify with normalised version of path\n    fullpath = os.path.normpath(os.path.join(base_path, filename))\n    if not fullpath.startswith(base_path):\n        raise Exception(\"not allowed\")\n    data = open(fullpath, 'rb').read()\n    return data\n\n```\n\n## References\n* OWASP: [Path Traversal](https://owasp.org/www-community/attacks/Path_Traversal).\n* npm: [werkzeug.utils.secure_filename](http://werkzeug.pocoo.org/docs/utils/#werkzeug.utils.secure_filename).\n* Common Weakness Enumeration: [CWE-22](https://cwe.mitre.org/data/definitions/22.html).\n* Common Weakness Enumeration: [CWE-23](https://cwe.mitre.org/data/definitions/23.html).\n* Common Weakness Enumeration: [CWE-36](https://cwe.mitre.org/data/definitions/36.html).\n* Common Weakness Enumeration: [CWE-73](https://cwe.mitre.org/data/definitions/73.html).\n* Common Weakness Enumeration: [CWE-99](https://cwe.mitre.org/data/definitions/99.html).\n\n\nBuild your secure coding skills and defend your code:\n\n[CWE 22] AAA [What is this? (2min video)](ddd)\n\nbbb [Try this challenge in Secure Code Warrior](ccc)\n\n[CWE 23] AAA [What is this? (2min video)](ddd)\n\nbbb [Try this challenge in Secure Code Warrior](ccc)\n\n[CWE 36] AAA [What is this? (2min video)](ddd)\n\nbbb [Try this challenge in Secure Code Warrior](ccc)\n\n[CWE 73] AAA [What is this? (2min video)](ddd)\n\nbbb [Try this challenge in Secure Code Warrior](ccc)\n\n[CWE 99] AAA [What is this? (2min video)](ddd)\n\nbbb [Try this challenge in Secure Code Warrior](ccc)\n\n[Matched on \"Path Traversal\"] AAA [What is this? (2min video)](ddd)\n\nbbb [Try this challenge in Secure Code Warrior](ccc)","markdown":"# Uncontrolled data used in path expression\nAccessing files using paths constructed from user-controlled data can allow an attacker to access unexpected resources. This can result in sensitive information being revealed or deleted, or an attacker being able to influence behavior by modifying unexpected files.\n\n\n## Recommendation\nValidate user input before using it to construct a file path, either using an off-the-shelf library function like `werkzeug.utils.secure_filename`, or by performing custom validation.\n\nIdeally, follow these rules:\n\n* Do not allow more than a single \".\" character.\n* Do not allow directory separators such as \"/\" or \"\\\\\" (depending on the file system).\n* Do not rely on simply replacing problematic sequences such as \"../\". For example, after applying this filter to \".../...//\", the resulting string would still be \"../\".\n* Use an allowlist of known good patterns.\n\n## Example\nIn the first example, a file name is read from an HTTP request and then used to access a file. However, a malicious user could enter a file name that is an absolute path, such as `\"/etc/passwd\"`.\n\nIn the second example, it appears that the user is restricted to opening a file within the `\"user\"` home directory. However, a malicious user could enter a file name containing special characters. For example, the string `\"../../../etc/passwd\"` will result in the code reading the file located at `\"/server/static/images/../../../etc/passwd\"`, which is the system's password file. This file would then be sent back to the user, giving them access to all the system's passwords. Note that a user could also use an absolute path here, since the result of `os.path.join(\"/server/static/images/\", \"/etc/passwd\")` is `\"/etc/passwd\"`.\n\nIn the third example, the path used to access the file system is normalized *before* being checked against a known prefix. This ensures that regardless of the user input, the resulting path is safe.\n\n\n```python\nimport os.path\nfrom flask import Flask, request, abort\n\napp = Flask(__name__)\n\n@app.route(\"/user_picture1\")\ndef user_picture1():\n    filename = request.args.get('p')\n    # BAD: This could read any file on the file system\n    data = open(filename, 'rb').read()\n    return data\n\n@app.route(\"/user_picture2\")\ndef user_picture2():\n    base_path = '/server/static/images'\n    filename = request.args.get('p')\n    # BAD: This could still read any file on the file system\n    data = open(os.path.join(base_path, filename), 'rb').read()\n    return data\n\n@app.route(\"/user_picture3\")\ndef user_picture3():\n    base_path = '/server/static/images'\n    filename = request.args.get('p')\n    #GOOD -- Verify with normalised version of path\n    fullpath = os.path.normpath(os.path.join(base_path, filename))\n    if not fullpath.startswith(base_path):\n        raise Exception(\"not allowed\")\n    data = open(fullpath, 'rb').read()\n    return data\n\n```\n\n## References\n* OWASP: [Path Traversal](https://owasp.org/www-community/attacks/Path_Traversal).\n* npm: [werkzeug.utils.secure_filename](http://werkzeug.pocoo.org/docs/utils/#werkzeug.utils.secure_filename).\n* Common Weakness Enumeration: [CWE-22](https://cwe.mitre.org/data/definitions/22.html).\n* Common Weakness Enumeration: [CWE-23](https://cwe.mitre.org/data/definitions/23.html).\n* Common Weakness Enumeration: [CWE-36](https://cwe.mitre.org/data/definitions/36.html).\n* Common Weakness Enumeration: [CWE-73](https://cwe.mitre.org/data/definitions/73.html).\n* Common Weakness Enumeration: [CWE-99](https://cwe.mitre.org/data/definitions/99.html).\n\n\n## Build your secure coding skills and defend your code\n\n#### [CWE 22] AAA *[What is this? (2min video)](ddd)*\n\n* bbb [Try this challenge in Secure Code Warrior](ccc)\n\n#### [CWE 23] AAA *[What is this? (2min video)](ddd)*\n\n* bbb [Try this challenge in Secure Code Warrior](ccc)\n\n#### [CWE 36] AAA *[What is this? (2min video)](ddd)*\n\n* bbb [Try this challenge in Secure Code Warrior](ccc)\n\n#### [CWE 73] AAA *[What is this? (2min video)](ddd)*\n\n* bbb [Try this challenge in Secure Code Warrior](ccc)\n\n#### [CWE 99] AAA *[What is this? (2min video)](ddd)*\n\n* bbb [Try this challenge in Secure Code Warrior](ccc)\n\n#### [Matched on \"Path Traversal\"] AAA *[What is this? (2min video)](ddd)*\n\n* bbb [Try this challenge in Secure Code Warrior](ccc)"},"properties":{"tags":["correctness","security","external/cwe/cwe-022","external/cwe/cwe-023","external/cwe/cwe-036","external/cwe/cwe-073","external/cwe/cwe-099"],"description":"Accessing paths influenced by users can allow an attacker to access unexpected resources.","id":"py/path-injection","kind":"path-problem","name":"Uncontrolled data used in path expression","precision":"high","problem.severity":"error","security-severity":"7.5","sub-severity":"high"}},{"id":"py/command-line-injection","name":"py/command-line-injection","shortDescription":{"text":"Uncontrolled command line"},"fullDescription":{"text":"Using externally controlled strings in a command line may allow a malicious user to change the meaning of the command."},"defaultConfiguration":{"enabled":true,"level":"error"},"help":{"text":"# Uncontrolled command line\nCode that passes user input directly to `exec`, `eval`, or some other library routine that executes a command, allows the user to execute malicious code.\n\n\n## Recommendation\nIf possible, use hard-coded string literals to specify the command to run or the library to load. Instead of passing the user input directly to the process or library function, examine the user input and then choose among hard-coded string literals.\n\nIf the applicable libraries or commands cannot be determined at compile time, then add code to verify that the user input string is safe before using it.\n\n\n## Example\nThe following example shows two functions. The first is unsafe as it takes a shell script that can be changed by a user, and passes it straight to `subprocess.call()` without examining it first. The second is safe as it selects the command from a predefined allowlist.\n\n\n```python\n\nurlpatterns = [\n    # Route to command_execution\n    url(r'^command-ex1$', command_execution_unsafe, name='command-execution-unsafe'),\n    url(r'^command-ex2$', command_execution_safe, name='command-execution-safe')\n]\n\nCOMMANDS = {\n    \"list\" :\"ls\",\n    \"stat\" : \"stat\"\n}\n\ndef command_execution_unsafe(request):\n    if request.method == 'POST':\n        action = request.POST.get('action', '')\n        #BAD -- No sanitizing of input\n        subprocess.call([\"application\", action])\n\ndef command_execution_safe(request):\n    if request.method == 'POST':\n        action = request.POST.get('action', '')\n        #GOOD -- Use an allowlist\n        subprocess.call([\"application\", COMMANDS[action]])\n\n```\n\n## References\n* OWASP: [Command Injection](https://www.owasp.org/index.php/Command_Injection).\n* Common Weakness Enumeration: [CWE-78](https://cwe.mitre.org/data/definitions/78.html).\n* Common Weakness Enumeration: [CWE-88](https://cwe.mitre.org/data/definitions/88.html).\n\n\nBuild your secure coding skills and defend your code:\n\n[CWE 78] AAA [What is this? (2min video)](ddd)\n\nbbb [Try this challenge in Secure Code Warrior](ccc)\n\n[CWE 88] AAA [What is this? (2min video)](ddd)\n\nbbb [Try this challenge in Secure Code Warrior](ccc)\n\n[Matched on \"Command Injection\"] AAA [What is this? (2min video)](ddd)\n\nbbb [Try this challenge in Secure Code Warrior](ccc)","markdown":"# Uncontrolled command line\nCode that passes user input directly to `exec`, `eval`, or some other library routine that executes a command, allows the user to execute malicious code.\n\n\n## Recommendation\nIf possible, use hard-coded string literals to specify the command to run or the library to load. Instead of passing the user input directly to the process or library function, examine the user input and then choose among hard-coded string literals.\n\nIf the applicable libraries or commands cannot be determined at compile time, then add code to verify that the user input string is safe before using it.\n\n\n## Example\nThe following example shows two functions. The first is unsafe as it takes a shell script that can be changed by a user, and passes it straight to `subprocess.call()` without examining it first. The second is safe as it selects the command from a predefined allowlist.\n\n\n```python\n\nurlpatterns = [\n    # Route to command_execution\n    url(r'^command-ex1$', command_execution_unsafe, name='command-execution-unsafe'),\n    url(r'^command-ex2$', command_execution_safe, name='command-execution-safe')\n]\n\nCOMMANDS = {\n    \"list\" :\"ls\",\n    \"stat\" : \"stat\"\n}\n\ndef command_execution_unsafe(request):\n    if request.method == 'POST':\n        action = request.POST.get('action', '')\n        #BAD -- No sanitizing of input\n        subprocess.call([\"application\", action])\n\ndef command_execution_safe(request):\n    if request.method == 'POST':\n        action = request.POST.get('action', '')\n        #GOOD -- Use an allowlist\n        subprocess.call([\"application\", COMMANDS[action]])\n\n```\n\n## References\n* OWASP: [Command Injection](https://www.owasp.org/index.php/Command_Injection).\n* Common Weakness Enumeration: [CWE-78](https://cwe.mitre.org/data/definitions/78.html).\n* Common Weakness Enumeration: [CWE-88](https://cwe.mitre.org/data/definitions/88.html).\n\n\n## Build your secure coding skills and defend your code\n\n#### [CWE 78] AAA *[What is this? (2min video)](ddd)*\n\n* bbb [Try this challenge in Secure Code Warrior](ccc)\n\n#### [CWE 88] AAA *[What is this? (2min video)](ddd)*\n\n* bbb [Try this challenge in Secure Code Warrior](ccc)\n\n#### [Matched on \"Command Injection\"] AAA *[What is this? (2min video)](ddd)*\n\n* bbb [Try this challenge in Secure Code Warrior](ccc)"},"properties":{"tags":["correctness","security","external/cwe/cwe-078","external/cwe/cwe-088"],"description":"Using externally controlled strings in a command line may allow a malicious\n              user to change the meaning of the command.","id":"py/command-line-injection","kind":"path-problem","name":"Uncontrolled command line","precision":"high","problem.severity":"error","security-severity":"9.8","sub-severity":"high"}}],"locations":[{"uri":"file:///opt/hostedtoolcache/CodeQL/2.17.4/x64/codeql/qlpacks/codeql/python-queries/1.0.0/","description":{"text":"The QL pack root directory."}},{"uri":"file:///opt/hostedtoolcache/CodeQL/2.17.4/x64/codeql/qlpacks/codeql/python-queries/1.0.0/qlpack.yml","description":{"text":"The QL pack definition file."}}]}]},"invocations":[{"toolExecutionNotifications":[{"locations":[{"physicalLocation":{"artifactLocation":{"uri":"dsvpwa.py","uriBaseId":"%SRCROOT%","index":1}}}],"message":{"text":""},"level":"none","descriptor":{"id":"py/diagnostics/successfully-extracted-files","index":0,"toolComponent":{"index":0}},"properties":{"formattedMessage":{"text":""}}},{"locations":[{"physicalLocation":{"artifactLocation":{"uri":"dsvpwa/__init__.py","uriBaseId":"%SRCROOT%","index":2}}}],"message":{"text":""},"level":"none","descriptor":{"id":"py/diagnostics/successfully-extracted-files","index":0,"toolComponent":{"index":0}},"properties":{"formattedMessage":{"text":""}}},{"locations":[{"physicalLocation":{"artifactLocation":{"uri":"dsvpwa/attacks.py","uriBaseId":"%SRCROOT%","index":3}}}],"message":{"text":""},"level":"none","descriptor":{"id":"py/diagnostics/successfully-extracted-files","index":0,"toolComponent":{"index":0}},"properties":{"formattedMessage":{"text":""}}},{"locations":[{"physicalLocation":{"artifactLocation":{"uri":"dsvpwa/server.py","uriBaseId":"%SRCROOT%","index":4}}}],"message":{"text":""},"level":"none","descriptor":{"id":"py/diagnostics/successfully-extracted-files","index":0,"toolComponent":{"index":0}},"properties":{"formattedMessage":{"text":""}}},{"locations":[{"physicalLocation":{"artifactLocation":{"uri":"dsvpwa/handlers.py","uriBaseId":"%SRCROOT%","index":0}}}],"message":{"text":""},"level":"none","descriptor":{"id":"py/diagnostics/successfully-extracted-files","index":0,"toolComponent":{"index":0}},"properties":{"formattedMessage":{"text":""}}},{"locations":[{"physicalLocation":{"artifactLocation":{"uri":".github/workflows/loy-codeql.yml","uriBaseId":"%SRCROOT%","index":5}}}],"message":{"text":""},"level":"none","descriptor":{"id":"py/diagnostics/successfully-extracted-files","index":0,"toolComponent":{"index":0}},"properties":{"formattedMessage":{"text":""}}},{"locations":[{"physicalLocation":{"artifactLocation":{"uri":"dsvpwa/__init__.py","uriBaseId":"%SRCROOT%","index":2}}}],"message":{"text":""},"level":"none","descriptor":{"id":"cli/expected-extracted-files/python","index":0},"properties":{"formattedMessage":{"text":""}}},{"locations":[{"physicalLocation":{"artifactLocation":{"uri":"dsvpwa/handlers.py","uriBaseId":"%SRCROOT%","index":0}}}],"message":{"text":""},"level":"none","descriptor":{"id":"cli/expected-extracted-files/python","index":0},"properties":{"formattedMessage":{"text":""}}},{"locations":[{"physicalLocation":{"artifactLocation":{"uri":"dsvpwa/server.py","uriBaseId":"%SRCROOT%","index":4}}}],"message":{"text":""},"level":"none","descriptor":{"id":"cli/expected-extracted-files/python","index":0},"properties":{"formattedMessage":{"text":""}}},{"locations":[{"physicalLocation":{"artifactLocation":{"uri":"dsvpwa/attacks.py","uriBaseId":"%SRCROOT%","index":3}}}],"message":{"text":""},"level":"none","descriptor":{"id":"cli/expected-extracted-files/python","index":0},"properties":{"formattedMessage":{"text":""}}},{"locations":[{"physicalLocation":{"artifactLocation":{"uri":"dsvpwa.py","uriBaseId":"%SRCROOT%","index":1}}}],"message":{"text":""},"level":"none","descriptor":{"id":"cli/expected-extracted-files/python","index":0},"properties":{"formattedMessage":{"text":""}}},{"locations":[{"physicalLocation":{"artifactLocation":{"uri":"static/js/custom.js","uriBaseId":"%SRCROOT%","index":6}}}],"message":{"text":""},"level":"none","descriptor":{"id":"cli/expected-extracted-files/javascript","index":1},"properties":{"formattedMessage":{"text":""}}}],"executionSuccessful":true}],"artifacts":[{"location":{"uri":"dsvpwa/handlers.py","uriBaseId":"%SRCROOT%","index":0}},{"location":{"uri":"dsvpwa.py","uriBaseId":"%SRCROOT%","index":1}},{"location":{"uri":"dsvpwa/__init__.py","uriBaseId":"%SRCROOT%","index":2}},{"location":{"uri":"dsvpwa/attacks.py","uriBaseId":"%SRCROOT%","index":3}},{"location":{"uri":"dsvpwa/server.py","uriBaseId":"%SRCROOT%","index":4}},{"location":{"uri":".github/workflows/loy-codeql.yml","uriBaseId":"%SRCROOT%","index":5}},{"location":{"uri":"static/js/custom.js","uriBaseId":"%SRCROOT%","index":6}}],"results":[{"ruleId":"py/path-injection","rule":{"id":"py/path-injection","index":5,"toolComponent":{"index":0}},"message":{"text":"This path depends on a [user-provided value](1)."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"dsvpwa/handlers.py","uriBaseId":"%SRCROOT%","index":0},"region":{"startLine":116,"startColumn":37,"endColumn":56}}}],"partialFingerprints":{"primaryLocationLineHash":"a886445d8048d84b:1","primaryLocationStartColumnFingerprint":"20"},"codeFlows":[{"threadFlows":[{"locations":[{"location":{"physicalLocation":{"artifactLocation":{"uri":"dsvpwa/handlers.py","uriBaseId":"%SRCROOT%","index":0},"region":{"startLine":196,"startColumn":16,"endColumn":20}},"message":{"text":"ControlFlowNode for self"}}},{"location":{"physicalLocation":{"artifactLocation":{"uri":"dsvpwa/handlers.py","uriBaseId":"%SRCROOT%","index":0},"region":{"startLine":197,"startColumn":9,"endColumn":13}},"message":{"text":"ControlFlowNode for self"}}},{"location":{"physicalLocation":{"artifactLocation":{"uri":"dsvpwa/handlers.py","uriBaseId":"%SRCROOT%","index":0},"region":{"startLine":198,"startColumn":9,"endColumn":13}},"message":{"text":"ControlFlowNode for self"}}},{"location":{"physicalLocation":{"artifactLocation":{"uri":"dsvpwa/handlers.py","uriBaseId":"%SRCROOT%","index":0},"region":{"startLine":211,"startColumn":26,"endColumn":35}},"message":{"text":"ControlFlowNode for Attribute"}}},{"location":{"physicalLocation":{"artifactLocation":{"uri":"dsvpwa/handlers.py","uriBaseId":"%SRCROOT%","index":0},"region":{"startLine":111,"startColumn":20,"endColumn":24}},"message":{"text":"ControlFlowNode for path"}}},{"location":{"physicalLocation":{"artifactLocation":{"uri":"dsvpwa/handlers.py","uriBaseId":"%SRCROOT%","index":0},"region":{"startLine":112,"startColumn":9,"endColumn":13}},"message":{"text":"ControlFlowNode for path"}}},{"location":{"physicalLocation":{"artifactLocation":{"uri":"dsvpwa/handlers.py","uriBaseId":"%SRCROOT%","index":0},"region":{"startLine":116,"startColumn":37,"endColumn":56}},"message":{"text":"ControlFlowNode for Attribute()"}}}]}]},{"threadFlows":[{"locations":[{"location":{"physicalLocation":{"artifactLocation":{"uri":"dsvpwa/handlers.py","uriBaseId":"%SRCROOT%","index":0},"region":{"startLine":196,"startColumn":16,"endColumn":20}},"message":{"text":"ControlFlowNode for self"}}},{"location":{"physicalLocation":{"artifactLocation":{"uri":"dsvpwa/handlers.py","uriBaseId":"%SRCROOT%","index":0},"region":{"startLine":197,"startColumn":9,"endColumn":13}},"message":{"text":"ControlFlowNode for self"}}},{"location":{"physicalLocation":{"artifactLocation":{"uri":"dsvpwa/handlers.py","uriBaseId":"%SRCROOT%","index":0},"region":{"startLine":198,"startColumn":21,"endColumn":47}},"message":{"text":"ControlFlowNode for Subscript"}}},{"location":{"physicalLocation":{"artifactLocation":{"uri":"dsvpwa/handlers.py","uriBaseId":"%SRCROOT%","index":0},"region":{"startLine":198,"startColumn":9,"endColumn":13}},"message":{"text":"[post] ControlFlowNode for self [Attribute path]"}}},{"location":{"physicalLocation":{"artifactLocation":{"uri":"dsvpwa/handlers.py","uriBaseId":"%SRCROOT%","index":0},"region":{"startLine":211,"startColumn":26,"endColumn":30}},"message":{"text":"ControlFlowNode for self [Attribute path]"}}},{"location":{"physicalLocation":{"artifactLocation":{"uri":"dsvpwa/handlers.py","uriBaseId":"%SRCROOT%","index":0},"region":{"startLine":211,"startColumn":26,"endColumn":35}},"message":{"text":"ControlFlowNode for Attribute"}}},{"location":{"physicalLocation":{"artifactLocation":{"uri":"dsvpwa/handlers.py","uriBaseId":"%SRCROOT%","index":0},"region":{"startLine":111,"startColumn":20,"endColumn":24}},"message":{"text":"ControlFlowNode for path"}}},{"location":{"physicalLocation":{"artifactLocation":{"uri":"dsvpwa/handlers.py","uriBaseId":"%SRCROOT%","index":0},"region":{"startLine":112,"startColumn":9,"endColumn":13}},"message":{"text":"ControlFlowNode for path"}}},{"location":{"physicalLocation":{"artifactLocation":{"uri":"dsvpwa/handlers.py","uriBaseId":"%SRCROOT%","index":0},"region":{"startLine":116,"startColumn":37,"endColumn":56}},"message":{"text":"ControlFlowNode for Attribute()"}}}]}]}],"relatedLocations":[{"id":1,"physicalLocation":{"artifactLocation":{"uri":"dsvpwa/handlers.py","uriBaseId":"%SRCROOT%","index":0},"region":{"startLine":196,"startColumn":16,"endColumn":20}},"message":{"text":"user-provided value"}}]},{"ruleId":"py/command-line-injection","rule":{"id":"py/command-line-injection","index":6,"toolComponent":{"index":0}},"message":{"text":"This command line depends on a [user-provided value](1)."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"dsvpwa/handlers.py","uriBaseId":"%SRCROOT%","index":0},"region":{"startLine":184,"startColumn":17,"endColumn":30}}}],"partialFingerprints":{"primaryLocationLineHash":"a392bb9657eb08d2:1","primaryLocationStartColumnFingerprint":"0"},"codeFlows":[{"threadFlows":[{"locations":[{"location":{"physicalLocation":{"artifactLocation":{"uri":"dsvpwa/handlers.py","uriBaseId":"%SRCROOT%","index":0},"region":{"startLine":177,"startColumn":16,"endColumn":20}},"message":{"text":"ControlFlowNode for self"}}},{"location":{"physicalLocation":{"artifactLocation":{"uri":"dsvpwa/handlers.py","uriBaseId":"%SRCROOT%","index":0},"region":{"startLine":184,"startColumn":17,"endColumn":30}},"message":{"text":"ControlFlowNode for Subscript"}}}]}]}],"relatedLocations":[{"id":1,"physicalLocation":{"artifactLocation":{"uri":"dsvpwa/handlers.py","uriBaseId":"%SRCROOT%","index":0},"region":{"startLine":177,"startColumn":16,"endColumn":20}},"message":{"text":"user-provided value"}}]}],"columnKind":"unicodeCodePoints","properties":{"semmle.formatSpecifier":"sarif-latest","metricResults":[{"rule":{"id":"py/summary/lines-of-code","index":36,"toolComponent":{"index":0}},"ruleId":"py/summary/lines-of-code","value":116930},{"rule":{"id":"py/summary/lines-of-user-code","index":37,"toolComponent":{"index":0}},"ruleId":"py/summary/lines-of-user-code","value":593,"baseline":709}],"codeqlConfigSummary":{"disableDefaultQueries":false}}}]}